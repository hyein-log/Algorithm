package dataStructure;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;

/*
 * 1부터 n까지의 수를 스택에 넣었다가 뽑아 늘어놓음으로써, 하나의 수열을 만들 수 있다. 
 * 이때, 스택에 push하는 순서는 반드시 오름차순을 지키도록 한다고 하자. 
 * 임의의 수열이 주어졌을 때 스택을 이용해 그 수열을 만들 수 있는지 없는지, 
 * 있다면 어떤 순서로 push와 pop 연산을 수행해야 하는지를 알아낼 수 있다. 
 * 이를 계산하는 프로그램을 작성하라.
 */
public class _1874 {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int tc = Integer.parseInt(br.readLine());
		Stack<Integer> stack = new Stack<Integer>();
		StringBuilder sb = new StringBuilder();
		
		int max = 0;
		boolean flag = true;
		for (int i = 0; i < tc; i++) {
			int n = Integer.parseInt(br.readLine());
			for (int j = max + 1; j <= n; j++) {
				stack.push(j);
				sb.append("+").append("\n");
			}
			if (!stack.isEmpty() && stack.peek() == n) {
				if (n > max) {
					max = n;
				}
				stack.pop();
				sb.append("-").append("\n");
			} else {
				if (!stack.isEmpty() && stack.peek() > n) {
					flag = false;
					break;
				}
			}
		}
		if (flag) {
			System.out.println(sb);
		} else {
			System.out.println("NO");
		}
	}
}
